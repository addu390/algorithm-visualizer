{"mappings":"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","sources":["quadtree.js","demos/5.js"],"sourcesContent":["/**\n * A Point holds (x,y) coordinates.\n * @typedef {{x:number, y: number}} Point\n */\n\n/**\n * A Boundary is an enclosed rectangular area.\n * @typedef {{topLeft: Point, bottomRight: Point}} Boundary\n */\n\n/**\n * A Quadtree is a tree where each node has exactly four children.\n * Each node can contain points up until `NODE_CAPACITY`, after\n * which the node will be subdivided into four child nodes.\n *\n * @typedef {{\n *  boundary: Boundary,\n *  points: Point[],\n *  topLeftChild?: Quadtree,\n *  bottomLeftChild?: Quadtree,\n *  topRightChild?: Quadtree,\n *  bottomRightChild?: Quadtree}} Quadtree\n */\n\n/**\n * Inserts a point into the Quadtree node. If the node is already at its maximum\n * capacity, the node will first be subdivided into four child nodes. Then, the new\n * point will be added to the child node it fits into.\n *\n * @param {Quadtree} node\n * @param {Point} point\n * @param {number} nodeCapacity\n * @returns true if the point was inserted into the node or one of its child nodes\n */\nfunction insert(node, point, nodeCapacity = 4) {\n  // If the point is outside the node's boundary, return false\n  if (!contains(node.boundary, point)) {\n    return false;\n  }\n\n  // If this node has not yet reached its capacity and has not\n  // yet been subdivided, insert the point into this node\n  if (node.points.length < nodeCapacity && !node.topLeftChild) {\n    node.points.push(point);\n    return true;\n  }\n\n  // At this point, the node has either already been subdivided,\n  // or has reached its capacity but hasn't been subdivided\n\n  // If the node has reached its capacity,\n  // but hasn't been subdivided, subdivide\n  if (!node.topLeftChild) {\n    subdivide(node, nodeCapacity);\n  }\n\n  // Insert the point into its correct child node. We can try inserting into all the child nodes\n  // The wrong ones (where the point's position is outside the child node's boundary) would\n  // simply return false, until we find the correct child node.\n  if (insert(node.topLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.topRightChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomRightChild, point, nodeCapacity)) return true;\n\n  // We shouldn't ever get to this point, though\n  return false;\n}\n\n/**\n * A boundary contains a point if the point is within the (x, y)\n * coordinates of the boundary's top-left and bottom-right corner\n *\n * @param {Boundary} boundary\n * @param {Point} point\n * @returns\n */\nfunction contains(boundary, point) {\n  return (\n    point.x >= boundary.topLeft.x &&\n    point.x <= boundary.bottomRight.x &&\n    point.y >= boundary.topLeft.y &&\n    point.y <= boundary.bottomRight.y\n  );\n}\n\n/**\n * Splits a node into four child nodes and moves the\n * points in the node into their correct child nodes.\n *\n * @param {Quadtree} node\n * @param {number} nodeCapacity\n */\nfunction subdivide(node, nodeCapacity) {\n  // Create the four child nodes\n  const { topLeft, bottomRight } = node.boundary;\n  const midPoint = {\n    x: (topLeft.x + bottomRight.x) / 2,\n    y: (topLeft.y + bottomRight.y) / 2,\n  };\n\n  node.topLeftChild = createNode({ x: topLeft.x, y: topLeft.y }, { x: midPoint.x, y: midPoint.y });\n  node.bottomLeftChild = createNode(\n    { x: topLeft.x, y: midPoint.y },\n    { x: midPoint.x, y: bottomRight.y }\n  );\n  node.topRightChild = createNode(\n    { x: midPoint.x, y: topLeft.y },\n    { x: bottomRight.x, y: midPoint.y }\n  );\n  node.bottomRightChild = createNode(\n    { x: midPoint.x, y: midPoint.y },\n    { x: bottomRight.x, y: bottomRight.y }\n  );\n\n  // Move the points in the node to the child node that should contain the point.\n  // Again, we can try inserting each point into all the child nodes. The wrong ones\n  // (where the point's position is outside the child node's boundary) would simply\n  // return false, until we find the correct child node.\n  node.points.forEach((point) => {\n    if (insert(node.topLeftChild, point, nodeCapacity)) return;\n    if (insert(node.bottomLeftChild, point, nodeCapacity)) return;\n    if (insert(node.topRightChild, point, nodeCapacity)) return;\n    if (insert(node.bottomRightChild, point, nodeCapacity)) return;\n  });\n\n  // We no longer need to keep the points in node\n  node.points = [];\n}\n\n/**\n * Returns all the points within the given boundary\n *\n * @param {Quadtree} node\n * @param {Boundary} boundary\n * @returns\n */\nfunction search(node, boundary) {\n  // If this node does not intersect with the search boundary,\n  // we know that the node and all its child nodes do not\n  // contain any points that fall into the search boundary\n  if (!intersects(node.boundary, boundary)) {\n    return [];\n  }\n\n  // If this node has not yet been subdivided, return\n  // all the points within the search boundary\n  if (!node.topLeftChild) {\n    return node.points.filter((point) => contains(boundary, point));\n  }\n\n  // If the node has been subdivided, search all\n  // the child nodes and merge the results\n  return search(node.topLeftChild, boundary)\n    .concat(search(node.bottomLeftChild, boundary))\n    .concat(search(node.topRightChild, boundary))\n    .concat(search(node.bottomRightChild, boundary));\n}\n\n/**\n * Returns true if the given boundary intersects with this boundary\n *\n * @param {Boundary} b1\n * @param {Boundary} b2\n * @returns\n */\nfunction intersects(b1, b2) {\n  return (\n    // not too right\n    b1.topLeft.x <= b2.bottomRight.x &&\n    // not too left\n    b1.bottomRight.x >= b2.topLeft.x &&\n    // not too down\n    b1.topLeft.y <= b2.bottomRight.y &&\n    // not too up\n    b1.bottomRight.y >= b2.topLeft.y\n  );\n}\n\n/**\n * Returns the nearest point to the given point\n *\n * @param {Quadtree} node\n * @param {Point} location\n * @param {{point: Point, distance: number} | undefined} nearestPoint\n * @returns\n */\nfunction nearest(\n  node,\n  location,\n  nearestPoint = {\n    point: null,\n    distance: distance(node.boundary.topLeft, node.boundary.bottomRight),\n  }\n) {\n  // If this node is farther away than the nearest point, no need to check here or any of its child nodes\n  if (\n    location.x < node.boundary.topLeft.x - nearestPoint.distance || // location too left\n    location.x > node.boundary.bottomRight.x + nearestPoint.distance || // location too right\n    location.y < node.boundary.topLeft.y - nearestPoint.distance || // location too top\n    location.y > node.boundary.bottomRight.y + nearestPoint.distance // location too bottom\n  ) {\n    return nearestPoint;\n  }\n\n  // Not yet subdivided, return the nearest point in this node\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      const d = distance(point, location);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  // Since this node has already been subdivided, check all its child nodes.\n  // Check the child node where the location falls first, before checking\n  // the adjacent nodes, and then the opposite node.\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  // True if location is at the top half of this node's boundary\n  const tb = location.y < (node.boundary.topLeft.y + node.boundary.bottomRight.y) / 2;\n  // True if location is at the left half of this node's boundary\n  const lr = location.x < (node.boundary.topLeft.x + node.boundary.bottomRight.x) / 2;\n\n  // containing node\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * (1 - lr)], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * lr], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * tb + 1 * (1 - lr)], location, nearestPoint);\n  // opposite node\n  nearestPoint = nearest(childNodes[2 * tb + 1 * lr], location, nearestPoint);\n\n  return nearestPoint;\n}\n\n/**\n * Returns the Euclidean distance between two points\n *\n * @param {Point} p1\n * @param {Point} p2\n * @returns\n */\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction createNode(topLeft, bottomRight) {\n  return { boundary: { topLeft, bottomRight }, points: [] };\n}\n\nmodule.exports = { insert, search, nearest, contains, distance };\n","const d3 = require('d3');\nconst { insert, distance } = require('../quadtree');\n\nconst width = 750;\nconst height = 300;\n\nconst data = d3.range(500).map(() => [Math.random() * width, Math.random() * height]);\n\nconst quadtree = {\n  boundary: {\n    topLeft: { x: 0, y: 0 },\n    bottomRight: { x: width, y: height },\n  },\n  points: [],\n  depth: 1,\n};\ndata.forEach(([x, y]) => {\n  insert(quadtree, { x, y });\n});\n\nconst svg = d3\n  .select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height)\n  .on('click', function (e) {\n    const [x, y] = d3.pointer(e, d3.selectAll('svg').node());\n    svg.selectAll('#pt').attr('cx', x).attr('cy', y);\n    draw();\n  });\n\nlet rect = svg\n  .selectAll('.node')\n  .data(nodes(quadtree))\n  .enter()\n  .append('rect')\n  .attr('class', 'node')\n  .attr('x', function (d) {\n    return d.boundary.topLeft.x;\n  })\n  .attr('y', function (d) {\n    return d.boundary.topLeft.y;\n  })\n  .attr('width', function (d) {\n    return d.boundary.bottomRight.x - d.boundary.topLeft.x;\n  })\n  .attr('height', function (d) {\n    return d.boundary.bottomRight.y - d.boundary.topLeft.y;\n  });\n\nlet pts = svg\n  .selectAll('.point')\n  .data(points(quadtree))\n  .enter()\n  .append('circle')\n  .attr('class', 'point')\n  .attr('cx', function (d) {\n    return d.x;\n  })\n  .attr('cy', function (d) {\n    return d.y;\n  })\n  .attr('r', 3);\n\nlet ptr = svg\n  .append('circle')\n  .attr('id', 'pt')\n  .attr('r', 3)\n  .attr('cx', width / 2)\n  .attr('cy', height / 2)\n  .style('fill', 'yellow');\n\nconst color = d3.scaleLinear().domain([0, 8]).range(['#efe', '#060']);\n\nfunction nodes(quadtree) {\n  quadtree.depth = 0;\n\n  const nodes = [];\n  visit(quadtree, (node) => {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction points(quadtree) {\n  return nodes(quadtree).flatMap((node) => node.points);\n}\n\nfunction visit(node, cb) {\n  cb(node);\n\n  if (node.topLeftChild) {\n    node.topLeftChild.depth = node.depth + 1;\n    visit(node.topLeftChild, cb);\n\n    node.topRightChild.depth = node.depth + 1;\n    visit(node.topRightChild, cb);\n\n    node.bottomLeftChild.depth = node.depth + 1;\n    visit(node.bottomLeftChild, cb);\n\n    node.bottomRightChild.depth = node.depth + 1;\n    visit(node.bottomRightChild, cb);\n  }\n}\n\nfunction draw() {\n  ptr = d3.selectAll('#pt');\n  const x = +ptr.attr('cx');\n  const y = +ptr.attr('cy');\n\n  pts.each((d) => {\n    d.scanned = d.selected = false;\n  });\n  rect.each((d) => {\n    d.visited = false;\n  });\n\n  const nearestPoint = nearest(quadtree, { x, y });\n  nearestPoint.point.selected = true;\n\n  pts.classed('scanned', (d) => d.scanned);\n  pts.classed('selected', (d) => d.selected);\n  rect.style('fill', (d) => (d.visited ? color(d.depth) : 'none'));\n}\n\nfunction nearest(\n  node,\n  location,\n  nearestPoint = {\n    point: null,\n    distance: distance(node.boundary.topLeft, node.boundary.bottomRight),\n  }\n) {\n  node.visited = true;\n\n  if (\n    location.x < node.boundary.topLeft.x - nearestPoint.distance || // location too left\n    location.x > node.boundary.bottomRight.x + nearestPoint.distance || // location too right\n    location.y < node.boundary.topLeft.y - nearestPoint.distance || // location too top\n    location.y > node.boundary.bottomRight.y + nearestPoint.distance // location too bottom\n  ) {\n    return nearestPoint;\n  }\n\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      point.scanned = true;\n      const d = distance(point, location);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  const tb = location.y < (node.boundary.topLeft.y + node.boundary.bottomRight.y) / 2;\n  const lr = location.x < (node.boundary.topLeft.x + node.boundary.bottomRight.x) / 2;\n\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * (1 - lr)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * lr], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * tb + 1 * (1 - lr)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * tb + 1 * lr], location, nearestPoint);\n  return nearestPoint;\n}\n\ndraw();\n"],"names":["$73dc4f22fc361a3a$var$insert","node","point","nodeCapacity","$73dc4f22fc361a3a$var$contains","boundary","points","length","topLeftChild","push","topLeft","bottomRight","midPoint","x","y","$73dc4f22fc361a3a$var$createNode","bottomLeftChild","topRightChild","bottomRightChild","forEach","$73dc4f22fc361a3a$var$subdivide","$73dc4f22fc361a3a$var$distance","p1","p2","Math","sqrt","pow","$73dc4f22fc361a3a$exports","$73dc4f22fc361a3a$var$search","b1","b2","concat","filter","$73dc4f22fc361a3a$var$nearest","location","nearestPoint","distance","d","childNodes","tb","lr","insert","$08ef325b76be50aa$var$data","$EQ8Ao","range","map","random","$08ef325b76be50aa$var$quadtree","depth","$08ef325b76be50aa$var$svg","select","append","attr","on","e","pointer","selectAll","$08ef325b76be50aa$var$draw","$08ef325b76be50aa$var$rect","data","$08ef325b76be50aa$var$nodes","enter","$08ef325b76be50aa$var$pts","quadtree","flatMap","$08ef325b76be50aa$var$ptr","$08ef325b76be50aa$var$width","$08ef325b76be50aa$var$height","style","$08ef325b76be50aa$var$color","scaleLinear","domain","nodes","$08ef325b76be50aa$var$visit","cb","each","scanned","selected","visited","$08ef325b76be50aa$var$nearest","classed","$08ef325b76be50aa$require$distance"],"version":3,"file":"5.29e096e4.js.map"}