{"mappings":"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","sources":["quadtrees/demos/4.js"],"sourcesContent":["const { range } = require('d3-array');\nconst { scaleLinear } = require('d3-scale');\nconst { select, pointer, selectAll } = require('d3-selection');\nconst { insert, distance, distanceToBoundary } = require('../quadtree');\n\nconst width = Math.min(window.innerWidth, 750);\nconst height = 300;\n\nconst data = range((width * height) / 600).map(() => [\n  Math.random() * width,\n  Math.random() * height,\n]);\n\nconst quadtree = {\n  boundary: {\n    x1: 0,\n    y1: 0,\n    x2: width,\n    y2: height,\n  },\n  points: [],\n  depth: 1,\n};\ndata.forEach(([x, y]) => {\n  insert(quadtree, { x, y });\n});\n\nconst svg = select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height)\n  .on('click', function (e) {\n    const [x, y] = pointer(e, selectAll('svg').node());\n    svg.selectAll('#pt').attr('cx', x).attr('cy', y);\n    draw();\n  });\n\nlet rect = svg\n  .selectAll('.node')\n  .data(nodes(quadtree))\n  .enter()\n  .append('rect')\n  .attr('class', 'node')\n  .attr('x', function (d) {\n    return d.boundary.x1;\n  })\n  .attr('y', function (d) {\n    return d.boundary.y1;\n  })\n  .attr('width', function (d) {\n    return d.boundary.x2 - d.boundary.x1;\n  })\n  .attr('height', function (d) {\n    return d.boundary.y2 - d.boundary.y1;\n  });\n\nlet pts = svg\n  .selectAll('.point')\n  .data(points(quadtree))\n  .enter()\n  .append('circle')\n  .attr('class', 'point')\n  .attr('cx', function (d) {\n    return d.x;\n  })\n  .attr('cy', function (d) {\n    return d.y;\n  })\n  .attr('r', 3);\n\nlet ptr = svg\n  .append('circle')\n  .attr('id', 'pt')\n  .attr('r', 3)\n  .attr('cx', width / 2)\n  .attr('cy', height / 2)\n  .style('fill', 'yellow');\n\nconst color = scaleLinear().domain([0, 8]).range(['#efe', '#060']);\n\nfunction nodes(quadtree) {\n  quadtree.depth = 0;\n\n  const nodes = [];\n  visit(quadtree, (node) => {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction points(quadtree) {\n  return nodes(quadtree).flatMap((node) => node.points);\n}\n\nfunction visit(node, cb) {\n  cb(node);\n\n  if (node.topLeftChild) {\n    node.topLeftChild.depth = node.depth + 1;\n    visit(node.topLeftChild, cb);\n\n    node.topRightChild.depth = node.depth + 1;\n    visit(node.topRightChild, cb);\n\n    node.bottomLeftChild.depth = node.depth + 1;\n    visit(node.bottomLeftChild, cb);\n\n    node.bottomRightChild.depth = node.depth + 1;\n    visit(node.bottomRightChild, cb);\n  }\n}\n\nfunction draw() {\n  ptr = selectAll('#pt');\n  const x = +ptr.attr('cx');\n  const y = +ptr.attr('cy');\n\n  pts.each((d) => {\n    d.scanned = d.selected = false;\n  });\n  rect.each((d) => {\n    d.visited = false;\n  });\n\n  const nearestPoint = nearest(quadtree, { x, y });\n  nearestPoint.point.selected = true;\n\n  pts.classed('scanned', (d) => d.scanned);\n  pts.classed('selected', (d) => d.selected);\n  rect.style('fill', (d) => (d.visited ? color(d.depth) : 'none'));\n}\n\nfunction nearest(node, location, nearestPoint = { point: null, distance: Number.MAX_VALUE }) {\n  node.visited = true;\n\n  if (distanceToBoundary(location, node.boundary) > nearestPoint.distance) {\n    return nearestPoint;\n  }\n\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      point.scanned = true;\n      const d = distance(location, point);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  const isTop = location.y < (node.boundary.y1 + node.boundary.y2) / 2;\n  const isLeft = location.x < (node.boundary.x1 + node.boundary.x2) / 2;\n\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * (1 - isLeft)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * isLeft], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * (1 - isLeft)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * isLeft], location, nearestPoint);\n  return nearestPoint;\n}\n\ndraw();\n"],"names":["range","scaleLinear","$cNEHL","select","pointer","selectAll","$gqj1B","insert","distance","distanceToBoundary","$f1526d6baaafba7f$var$width","Math","min","window","innerWidth","$f1526d6baaafba7f$var$data","$f1526d6baaafba7f$require$range","map","random","$f1526d6baaafba7f$var$quadtree","boundary","x1","y1","x2","y2","points","depth","forEach","x","y","$f1526d6baaafba7f$var$svg","$f1526d6baaafba7f$require$select","append","attr","on","e","$f1526d6baaafba7f$require$pointer","$f1526d6baaafba7f$require$selectAll","node","$f1526d6baaafba7f$var$draw","$f1526d6baaafba7f$var$rect","data","$f1526d6baaafba7f$var$nodes","enter","d","$f1526d6baaafba7f$var$pts","quadtree","flatMap","$f1526d6baaafba7f$var$ptr","$f1526d6baaafba7f$var$height","style","$f1526d6baaafba7f$var$color","$f1526d6baaafba7f$require$scaleLinear","domain","nodes","$f1526d6baaafba7f$var$visit","push","cb","topLeftChild","topRightChild","bottomLeftChild","bottomRightChild","each","scanned","selected","visited","$f1526d6baaafba7f$var$nearest","point","classed","location","nearestPoint","Number","MAX_VALUE","$f1526d6baaafba7f$require$distanceToBoundary","$f1526d6baaafba7f$require$distance","childNodes","isTop","isLeft"],"version":3,"file":"4.dc7b115a.js.map"}