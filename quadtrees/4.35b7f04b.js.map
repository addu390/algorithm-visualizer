{"mappings":"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","sources":["quadtree.js","demos/4.js"],"sourcesContent":["/**\n * A Point holds (x,y) coordinates.\n * @typedef {{x:number, y: number}} Point\n */\n\n/**\n * A Boundary is an enclosed rectangular area.\n * @typedef {{x1:number, x2: number, y1: number, y2: number}} Boundary\n */\n\n/**\n * A Quadtree is a tree where each node has exactly four children.\n * Each node can contain points up until `NODE_CAPACITY`, after\n * which the node will be subdivided into four child nodes.\n *\n * @typedef {{\n *  boundary: Boundary,\n *  points: Point[],\n *  topLeftChild?: Quadtree,\n *  bottomLeftChild?: Quadtree,\n *  topRightChild?: Quadtree,\n *  bottomRightChild?: Quadtree}} Quadtree\n */\n\n/**\n * Inserts a point into the Quadtree node. If the node is already at its maximum\n * capacity, the node will first be subdivided into four child nodes. Then, the new\n * point will be added to the child node it fits into.\n *\n * @param {Quadtree} node\n * @param {Point} point\n * @param {number} nodeCapacity\n * @returns true if the point was inserted into the node or one of its child nodes\n */\nfunction insert(node, point, nodeCapacity = 4) {\n  // If the point is outside the node's boundary, return false\n  if (!contains(node.boundary, point)) {\n    return false;\n  }\n\n  // If this node has not yet reached its capacity and has not\n  // yet been subdivided, insert the point into this node\n  if (node.points.length < nodeCapacity && !node.topLeftChild) {\n    node.points.push(point);\n    return true;\n  }\n\n  // At this point, the node has either already been subdivided,\n  // or has reached its capacity but hasn't been subdivided\n\n  // If the node has reached its capacity,\n  // but hasn't been subdivided, subdivide\n  if (!node.topLeftChild) {\n    subdivide(node, nodeCapacity);\n  }\n\n  // Insert the point into its correct child node. We can try inserting into all the child nodes\n  // The wrong ones (where the point's position is outside the child node's boundary) would\n  // simply return false, until we find the correct child node.\n  if (insert(node.topLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.topRightChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomRightChild, point, nodeCapacity)) return true;\n\n  // We shouldn't ever get to this point, though\n  return false;\n}\n\n/**\n * A boundary contains a point if the point is within the (x, y)\n * coordinates of the boundary's top-left and bottom-right corner\n *\n * @param {Boundary} boundary\n * @param {Point} point\n * @returns\n */\nfunction contains(boundary, point) {\n  return (\n    point.x >= boundary.x1 &&\n    point.x <= boundary.x2 &&\n    point.y >= boundary.y1 &&\n    point.y <= boundary.y2\n  );\n}\n\n/**\n * Splits a node into four child nodes and moves the\n * points in the node into their correct child nodes.\n *\n * @param {Quadtree} node\n * @param {number} nodeCapacity\n */\nfunction subdivide(node, nodeCapacity) {\n  // Create the four child nodes\n  const { x1, x2, y1, y2 } = node.boundary;\n  const midPoint = {\n    x: (x1 + x2) / 2,\n    y: (y1 + y2) / 2,\n  };\n\n  node.topLeftChild = createNode({ x1, y1, x2: midPoint.x, y2: midPoint.y });\n  node.bottomLeftChild = createNode({ x1, y1: midPoint.y, x2: midPoint.x, y2 });\n  node.topRightChild = createNode({ x1: midPoint.x, y1, x2, y2: midPoint.y });\n  node.bottomRightChild = createNode({ x1: midPoint.x, y1: midPoint.y, x2, y2 });\n\n  // Move the points in the node to the child node that should contain the point.\n  // Again, we can try inserting each point into all the child nodes. The wrong ones\n  // (where the point's position is outside the child node's boundary) would simply\n  // return false, until we find the correct child node.\n  node.points.forEach((point) => {\n    if (insert(node.topLeftChild, point, nodeCapacity)) return;\n    if (insert(node.bottomLeftChild, point, nodeCapacity)) return;\n    if (insert(node.topRightChild, point, nodeCapacity)) return;\n    if (insert(node.bottomRightChild, point, nodeCapacity)) return;\n  });\n\n  // We no longer need to keep the points in node\n  node.points = [];\n}\n\n/**\n * Returns all the points within the given boundary\n *\n * @param {Quadtree} node\n * @param {Boundary} boundary\n * @returns\n */\nfunction search(node, boundary) {\n  // If this node does not intersect with the search boundary,\n  // we know that the node and all its child nodes do not\n  // contain any points that fall into the search boundary\n  if (!intersects(node.boundary, boundary)) {\n    return [];\n  }\n\n  // If this node has not yet been subdivided, return\n  // all the points within the search boundary\n  if (!node.topLeftChild) {\n    return node.points.filter((point) => contains(boundary, point));\n  }\n\n  // If the node has been subdivided, search all\n  // the child nodes and merge the results\n  return search(node.topLeftChild, boundary)\n    .concat(search(node.bottomLeftChild, boundary))\n    .concat(search(node.topRightChild, boundary))\n    .concat(search(node.bottomRightChild, boundary));\n}\n\n/**\n * Returns true if two boundaries interesect\n *\n * @param {Boundary} b1\n * @param {Boundary} b2\n * @returns\n */\nfunction intersects(b1, b2) {\n  return (\n    // not too right\n    b1.x1 <= b2.x2 &&\n    // not too left\n    b1.x2 >= b2.x1 &&\n    // not too down\n    b1.y1 <= b2.y2 &&\n    // not too up\n    b1.y2 >= b2.y1\n  );\n}\n\n/**\n * Returns the nearest point to the given point\n *\n * @param {Quadtree} node\n * @param {Point} location\n * @param {{point: Point, distance: number} | undefined} nearestPoint\n * @returns\n */\nfunction nearest(node, location, nearestPoint = { point: null, distance: Number.MAX_VALUE }) {\n  // If this node is farther away than the nearest point, no need to check here or any of its child nodes\n  if (\n    location.x < node.boundary.x1 - nearestPoint.distance || // location too left\n    location.x > node.boundary.x2 + nearestPoint.distance || // location too right\n    location.y < node.boundary.y1 - nearestPoint.distance || // location too top\n    location.y > node.boundary.y2 + nearestPoint.distance // location too bottom\n  ) {\n    return nearestPoint;\n  }\n\n  // Not yet subdivided, return the nearest point in this node\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      const d = distance(point, location);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  // Since this node has already been subdivided, check all its child nodes.\n  // Check the child node where the location falls first, before checking\n  // the adjacent nodes, and then the opposite node.\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  const isTop = location.y < (node.boundary.y1 + node.boundary.y2) / 2;\n  const isLeft = location.x < (node.boundary.x1 + node.boundary.x2) / 2;\n\n  // containing node\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * (1 - isLeft)], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * isLeft], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * (1 - isLeft)], location, nearestPoint);\n  // opposite node\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * isLeft], location, nearestPoint);\n\n  return nearestPoint;\n}\n\n/**\n * Returns the Euclidean distance between two points\n *\n * @param {Point} p1\n * @param {Point} p2\n * @returns\n */\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction createNode(boundary) {\n  return { boundary, points: [] };\n}\n\nmodule.exports = { insert, search, nearest, contains, distance };\n","const d3 = require('d3');\nconst { insert, distance } = require('../quadtree');\n\nconst width = 750;\nconst height = 300;\n\nconst data = d3.range(500).map(() => [Math.random() * width, Math.random() * height]);\n\nconst quadtree = {\n  boundary: {\n    topLeft: { x: 0, y: 0 },\n    bottomRight: { x: width, y: height },\n  },\n  points: [],\n  depth: 1,\n};\ndata.forEach(([x, y]) => {\n  insert(quadtree, { x, y });\n});\n\nconst svg = d3\n  .select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height)\n  .on('click', function (e) {\n    const [x, y] = d3.pointer(e, d3.selectAll('svg').node());\n    svg.selectAll('#pt').attr('cx', x).attr('cy', y);\n    draw();\n  });\n\nlet rect = svg\n  .selectAll('.node')\n  .data(nodes(quadtree))\n  .enter()\n  .append('rect')\n  .attr('class', 'node')\n  .attr('x', function (d) {\n    return d.boundary.topLeft.x;\n  })\n  .attr('y', function (d) {\n    return d.boundary.topLeft.y;\n  })\n  .attr('width', function (d) {\n    return d.boundary.bottomRight.x - d.boundary.topLeft.x;\n  })\n  .attr('height', function (d) {\n    return d.boundary.bottomRight.y - d.boundary.topLeft.y;\n  });\n\nlet pts = svg\n  .selectAll('.point')\n  .data(points(quadtree))\n  .enter()\n  .append('circle')\n  .attr('class', 'point')\n  .attr('cx', function (d) {\n    return d.x;\n  })\n  .attr('cy', function (d) {\n    return d.y;\n  })\n  .attr('r', 3);\n\nlet ptr = svg\n  .append('circle')\n  .attr('id', 'pt')\n  .attr('r', 3)\n  .attr('cx', width / 2)\n  .attr('cy', height / 2)\n  .style('fill', 'yellow');\n\nconst color = d3.scaleLinear().domain([0, 8]).range(['#efe', '#060']);\n\nfunction nodes(quadtree) {\n  quadtree.depth = 0;\n\n  const nodes = [];\n  visit(quadtree, (node) => {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction points(quadtree) {\n  return nodes(quadtree).flatMap((node) => node.points);\n}\n\nfunction visit(node, cb) {\n  cb(node);\n\n  if (node.topLeftChild) {\n    node.topLeftChild.depth = node.depth + 1;\n    visit(node.topLeftChild, cb);\n\n    node.topRightChild.depth = node.depth + 1;\n    visit(node.topRightChild, cb);\n\n    node.bottomLeftChild.depth = node.depth + 1;\n    visit(node.bottomLeftChild, cb);\n\n    node.bottomRightChild.depth = node.depth + 1;\n    visit(node.bottomRightChild, cb);\n  }\n}\n\nfunction draw() {\n  ptr = d3.selectAll('#pt');\n  const x = +ptr.attr('cx');\n  const y = +ptr.attr('cy');\n\n  pts.each((d) => {\n    d.scanned = d.selected = false;\n  });\n  rect.each((d) => {\n    d.visited = false;\n  });\n\n  const nearestPoint = nearest(quadtree, { x, y });\n  nearestPoint.point.selected = true;\n\n  pts.classed('scanned', (d) => d.scanned);\n  pts.classed('selected', (d) => d.selected);\n  rect.style('fill', (d) => (d.visited ? color(d.depth) : 'none'));\n}\n\nfunction nearest(\n  node,\n  location,\n  nearestPoint = {\n    point: null,\n    distance: distance(node.boundary.topLeft, node.boundary.bottomRight),\n  }\n) {\n  node.visited = true;\n\n  if (\n    location.x < node.boundary.topLeft.x - nearestPoint.distance || // location too left\n    location.x > node.boundary.bottomRight.x + nearestPoint.distance || // location too right\n    location.y < node.boundary.topLeft.y - nearestPoint.distance || // location too top\n    location.y > node.boundary.bottomRight.y + nearestPoint.distance // location too bottom\n  ) {\n    return nearestPoint;\n  }\n\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      point.scanned = true;\n      const d = distance(point, location);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  const isTop = location.y < (node.boundary.topLeft.y + node.boundary.bottomRight.y) / 2;\n  const isLeft = location.x < (node.boundary.topLeft.x + node.boundary.bottomRight.x) / 2;\n\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * (1 - isLeft)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * (1 - isTop) + 1 * isLeft], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * (1 - isLeft)], location, nearestPoint);\n  nearestPoint = nearest(childNodes[2 * isTop + 1 * isLeft], location, nearestPoint);\n  return nearestPoint;\n}\n\ndraw();\n"],"names":["$73dc4f22fc361a3a$var$insert","node","point","nodeCapacity","$73dc4f22fc361a3a$var$contains","boundary","points","length","topLeftChild","push","x1","x2","y1","y2","midPoint","x","y","$73dc4f22fc361a3a$var$createNode","bottomLeftChild","topRightChild","bottomRightChild","forEach","$73dc4f22fc361a3a$var$subdivide","$73dc4f22fc361a3a$var$distance","p1","p2","Math","sqrt","pow","$73dc4f22fc361a3a$exports","$73dc4f22fc361a3a$var$search","b1","b2","concat","filter","$73dc4f22fc361a3a$var$nearest","location","nearestPoint","distance","Number","MAX_VALUE","d","childNodes","isTop","isLeft","insert","$7a4a7b132fd983fb$var$data","$EQ8Ao","range","map","random","$7a4a7b132fd983fb$var$quadtree","topLeft","bottomRight","depth","$7a4a7b132fd983fb$var$svg","select","append","attr","on","e","pointer","selectAll","$7a4a7b132fd983fb$var$draw","$7a4a7b132fd983fb$var$rect","data","$7a4a7b132fd983fb$var$nodes","enter","$7a4a7b132fd983fb$var$pts","quadtree","flatMap","$7a4a7b132fd983fb$var$ptr","$7a4a7b132fd983fb$var$width","$7a4a7b132fd983fb$var$height","style","$7a4a7b132fd983fb$var$color","scaleLinear","domain","nodes","$7a4a7b132fd983fb$var$visit","cb","each","scanned","selected","visited","$7a4a7b132fd983fb$var$nearest","classed","$7a4a7b132fd983fb$require$distance"],"version":3,"file":"4.35b7f04b.js.map"}