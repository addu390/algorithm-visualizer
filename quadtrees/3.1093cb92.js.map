{"mappings":"qfAiCG,SACMA,EAAOC,EAAMC,EAAOC,EAAe,GAE1C,QAAKC,EAASH,EAAKI,SAAUH,KAMzBD,EAAKK,OAAOC,OAASJ,IAAiBF,EAAKO,cAC7CP,EAAKK,OAAOG,KAAKP,IACV,IAQJD,EAAKO,cAuCT,SACgBP,EAAME,GAEvB,MAAKO,QAAGA,EAAOC,YAAEA,GAAgBV,EAAKI,SAChCO,EAAQ,CACZC,GAAIH,EAAQG,EAAIF,EAAYE,GAAK,EACjCC,GAAIJ,EAAQI,EAAIH,EAAYG,GAAK,GAGnCb,EAAKO,aAAeO,EAAU,CAAGF,EAAGH,EAAQG,EAAGC,EAAGJ,EAAQI,IAAOD,EAAGD,EAASC,EAAGC,EAAGF,EAASE,IAC5Fb,EAAKe,gBAAkBD,EAAU,CAC7BF,EAAGH,EAAQG,EAAGC,EAAGF,EAASE,IAC1BD,EAAGD,EAASC,EAAGC,EAAGH,EAAYG,IAElCb,EAAKgB,cAAgBF,EAAU,CAC3BF,EAAGD,EAASC,EAAGC,EAAGJ,EAAQI,IAC1BD,EAAGF,EAAYE,EAAGC,EAAGF,EAASE,IAElCb,EAAKiB,iBAAmBH,EAAU,CAC9BF,EAAGD,EAASC,EAAGC,EAAGF,EAASE,IAC3BD,EAAGF,EAAYE,EAAGC,EAAGH,EAAYG,IAOrCb,EAAKK,OAAOa,SAASjB,IACfF,EAAOC,EAAKO,aAAcN,EAAOC,IACjCH,EAAOC,EAAKe,gBAAiBd,EAAOC,IACpCH,EAAOC,EAAKgB,cAAef,EAAOC,IAClCH,EAAOC,EAAKiB,iBAAkBhB,EAAOC,MAI3CF,EAAKK,OAAM,GAzETc,CAAUnB,EAAME,KAMdH,EAAOC,EAAKO,aAAcN,EAAOC,OACjCH,EAAOC,EAAKe,gBAAiBd,EAAOC,OACpCH,EAAOC,EAAKgB,cAAef,EAAOC,MAClCH,EAAOC,EAAKiB,iBAAkBhB,EAAOC,OAaxC,SACMC,EAASC,EAAUH,UAExBA,EAAMW,GAAKR,EAASK,QAAQG,GAC5BX,EAAMW,GAAKR,EAASM,YAAYE,GAChCX,EAAMY,GAAKT,EAASK,QAAQI,GAC5BZ,EAAMY,GAAKT,EAASM,YAAYG,EAyKjC,SACMO,EAASC,EAAIC,UACbC,KAAKC,KAAKD,KAAKE,IAAIJ,EAAGT,EAAIU,EAAGV,EAAG,GAAKW,KAAKE,IAAIJ,EAAGR,EAAIS,EAAGT,EAAG,aAG3DC,EAAWL,EAASC,UAClBN,SAAQ,SAAIK,cAASC,GAAeL,OAAM,UAGvC,QAAKN,SA5HhB,SACM2B,EAAO1B,EAAMI,GAIpB,OAyBkBuB,EAzBF3B,EAAKI,SAyBCwB,EAzBSxB,EA4B7BuB,EAAGlB,QAAQG,GAAKgB,EAAGlB,YAAYE,GAE/Be,EAAGjB,YAAYE,GAAKgB,EAAGnB,QAAQG,GAE/Be,EAAGlB,QAAQI,GAAKe,EAAGlB,YAAYG,GAE/Bc,EAAGjB,YAAYG,GAAKe,EAAGnB,QAAQI,EA5B5Bb,EAAKO,aAMHmB,EAAO1B,EAAKO,aAAcH,GAC9ByB,OAAOH,EAAO1B,EAAKe,gBAAiBX,IACpCyB,OAAOH,EAAO1B,EAAKgB,cAAeZ,IAClCyB,OAAOH,EAAO1B,EAAKiB,iBAAkBb,IAR/BJ,EAAKK,OAAOyB,QAAQ7B,GAAUE,EAASC,EAAUH,KAPnB,GAwBtC,IACiB0B,EAAIC,WAoBrB,SACMG,EACP/B,EACAgC,EACAC,EAAY,CACVhC,MAAO,KACPiC,SAAUd,EAASpB,EAAKI,SAASK,QAAST,EAAKI,SAASM,eAI1D,GACEsB,EAASpB,EAAIZ,EAAKI,SAASK,QAAQG,EAAIqB,EAAaC,UACpDF,EAASpB,EAAIZ,EAAKI,SAASM,YAAYE,EAAIqB,EAAaC,UACxDF,EAASnB,EAAIb,EAAKI,SAASK,QAAQI,EAAIoB,EAAaC,UACpDF,EAASnB,EAAIb,EAAKI,SAASM,YAAYG,EAAIoB,EAAaC,gBAEjDD,EAIT,IAAKjC,EAAKO,oBACRP,EAAKK,OAAOa,SAASjB,IACnB,MAAMkC,EAAIf,EAASnB,EAAO+B,GACtBG,EAAIF,EAAaC,WACnBD,EAAahC,MAAQA,EACrBgC,EAAaC,SAAWC,MAGrBF,EAOT,MAAMG,EAAU,CACdpC,EAAKO,aACLP,EAAKgB,cACLhB,EAAKe,gBACLf,EAAKiB,kBAIDoB,EAAKL,EAASnB,GAAKb,EAAKI,SAASK,QAAQI,EAAIb,EAAKI,SAASM,YAAYG,GAAK,EAE5EyB,EAAKN,EAASpB,GAAKZ,EAAKI,SAASK,QAAQG,EAAIZ,EAAKI,SAASM,YAAYE,GAAK,SAGlFqB,EAAeF,EAAQK,EAAW,GAAK,EAAIC,GAAM,GAAK,EAAIC,IAAMN,EAAUC,GAE1EA,EAAeF,EAAQK,EAAW,GAAK,EAAIC,GAAM,EAAIC,GAAKN,EAAUC,GAEpEA,EAAeF,EAAQK,EAAW,EAAIC,EAAK,GAAK,EAAIC,IAAMN,EAAUC,GAEpEA,EAAeF,EAAQK,EAAW,EAAIC,EAAK,EAAIC,GAAKN,EAAUC,aAoBpB9B,WAAUiB,GClQhDmB,OAEN,MAGMC,EAAMC,EAAAC,OAAS,WAAYC,OAAM,OAAQC,KAAI,QAHrC,KAGsDA,KAAI,SAFzD,KAIf,IAAIC,EAAQ,CACVzC,SAAQ,CACNK,QAAO,CAAIG,EAAG,EAAGC,EAAG,GACpBH,YAAW,CAAIE,EARL,IAQeC,EAPd,MASbR,OAAM,GACNyC,MAAO,GAGT,MAAMC,EAAQN,EAAAO,cAAiBC,OAAM,CAAE,EAAG,IAAIC,MAAK,0BAE1CC,EAAMC,GACbA,EAASN,MAAQ,EAEjB,MAAMO,EAAK,UACXC,EAAMF,GAAWpD,IACfqD,EAAM7C,KAAKR,MAENqD,WAGAE,EAAOH,UACPD,EAAMC,GAAUI,SAASxD,GAASA,EAAKK,kBAGvCiD,EAAMtD,EAAMyD,GACnBA,EAAGzD,GAECA,EAAKO,eACPP,EAAKO,aAAauC,MAAQ9C,EAAK8C,MAAQ,EACvCQ,EAAMtD,EAAKO,aAAckD,GAEzBzD,EAAKgB,cAAc8B,MAAQ9C,EAAK8C,MAAQ,EACxCQ,EAAMtD,EAAKgB,cAAeyC,GAE1BzD,EAAKe,gBAAgB+B,MAAQ9C,EAAK8C,MAAQ,EAC1CQ,EAAMtD,EAAKe,gBAAiB0C,GAE5BzD,EAAKiB,iBAAiB6B,MAAQ9C,EAAK8C,MAAQ,EAC3CQ,EAAMtD,EAAKiB,iBAAkBwC,IAIjC,IAAIC,EACAC,EA2EAC,WAzEKC,IACPF,EAAOA,EAAKG,KAAKX,EAAMN,IACvBc,EAAKI,OAAOC,SACZL,EACGM,QACAtB,OAAM,QACNC,KAAI,QAAQ,QACZA,KAAI,KAAI,SAAYT,UACZA,EAAE/B,SAASK,QAAQG,KAE3BgC,KAAI,KAAI,SAAYT,UACZA,EAAE/B,SAASK,QAAQI,KAE3B+B,KAAI,SAAQ,SAAYT,UAChBA,EAAE/B,SAASM,YAAYE,EAAIuB,EAAE/B,SAASK,QAAQG,KAEtDgC,KAAI,UAAS,SAAYT,UACjBA,EAAE/B,SAASM,YAAYG,EAAIsB,EAAE/B,SAASK,QAAQI,KAGzD6C,EAAMA,EAAII,KAAKP,EAAOV,IACtBa,EAAIK,OAAOC,SACXN,EACGO,QACAtB,OAAM,UACNC,KAAI,QAAQ,SACZA,KAAI,MAAK,SAAYT,UACbA,EAAEvB,KAEVgC,KAAI,MAAK,SAAYT,UACbA,EAAEtB,KAEV+B,KAAI,IAAM,GAEbJ,EAAI0B,UAAS,SAAUC,MAAK,QAAO,SAAYhC,UACtCY,EAAMZ,EAAEW,UAKnBa,EAAOnB,EACJ0B,UAAS,SACTJ,KAAKX,EAAMN,IACXoB,QACAtB,OAAM,QACNC,KAAI,QAAQ,QACZA,KAAI,KAAI,SAAYT,UACZA,EAAE/B,SAASK,QAAQG,KAE3BgC,KAAI,KAAI,SAAYT,UACZA,EAAE/B,SAASK,QAAQI,KAE3B+B,KAAI,SAAQ,SAAYT,UAChBA,EAAE/B,SAASM,YAAYE,EAAIuB,EAAE/B,SAASK,QAAQG,KAEtDgC,KAAI,UAAS,SAAYT,UACjBA,EAAE/B,SAASM,YAAYG,EAAIsB,EAAE/B,SAASK,QAAQI,KAGzD6C,EAAMlB,EACH0B,UAAS,UACTJ,KAAKP,EAAOV,IACZoB,QACAtB,OAAM,UACNC,KAAI,QAAQ,SACZA,KAAI,MAAK,SAAYT,UACbA,EAAEvB,KAEVgC,KAAI,MAAK,SAAYT,UACbA,EAAEtB,KAEV+B,KAAI,IAAM,OAKR,IAAIwB,EAAI,EAAGA,EAFN,IAEaA,IAACC,EACfxB,EAAQ,CAAIjC,EAhIP,IAgIUW,KAAK+C,SAAkBzD,EA/HhC,IA+HmCU,KAAK+C,WAGvDT,IAEAU,SAASC,cAAa,UAAWC,iBAAgB,SAAQ,KACnDb,GACFc,cAAcd,GAGhBf,EAAQ,CACNzC,SAAQ,CACNK,QAAO,CAAIG,EAAG,EAAGC,EAAG,GACpBH,YAAW,CAAIE,EA7IP,IA6IiBC,EA5IhB,MA8IXR,OAAM,GACNyC,MAAO,GAGT,IAAI6B,EAAI,EACRf,EAAWgB,aAAW,OACb/B,EAAQ,CAAIjC,EArJT,IAqJYW,KAAK+C,SAAkBzD,EApJlC,IAoJqCU,KAAK+C,WACrDT,IAEY,KAARc,KACFD,cAAcd,KAEf","sources":["quadtree.js","demos/3.js"],"sourcesContent":["/**\n * A Point holds (x,y) coordinates.\n * @typedef {{x:number, y: number}} Point\n */\n\n/**\n * A Boundary is an enclosed rectangular area.\n * @typedef {{topLeft: Point, bottomRight: Point}} Boundary\n */\n\n/**\n * A Quadtree is a tree where each node has exactly four children.\n * Each node can contain points up until `NODE_CAPACITY`, after\n * which the node will be subdivided into four child nodes.\n *\n * @typedef {{\n *  boundary: Boundary,\n *  points: Point[],\n *  topLeftChild?: Quadtree,\n *  bottomLeftChild?: Quadtree,\n *  topRightChild?: Quadtree,\n *  bottomRightChild?: Quadtree}} Quadtree\n */\n\n/**\n * Inserts a point into the Quadtree node. If the node is already at its maximum\n * capacity, the node will first be subdivided into four child nodes. Then, the new\n * point will be added to the child node it fits into.\n *\n * @param {Quadtree} node\n * @param {Point} point\n * @param {number} nodeCapacity\n * @returns true if the point was inserted into the node or one of its child nodes\n */\nfunction insert(node, point, nodeCapacity = 4) {\n  // If the point is outside the node's boundary, return false\n  if (!contains(node.boundary, point)) {\n    return false;\n  }\n\n  // If this node has not yet reached its capacity and has not\n  // yet been subdivided, insert the point into this node\n  if (node.points.length < nodeCapacity && !node.topLeftChild) {\n    node.points.push(point);\n    return true;\n  }\n\n  // At this point, the node has either already been subdivided,\n  // or has reached its capacity but hasn't been subdivided\n\n  // If the node has reached its capacity,\n  // but hasn't been subdivided, subdivide\n  if (!node.topLeftChild) {\n    subdivide(node, nodeCapacity);\n  }\n\n  // Insert the point into its correct child node. We can try inserting into all the child nodes\n  // The wrong ones (where the point's position is outside the child node's boundary) would\n  // simply return false, until we find the correct child node.\n  if (insert(node.topLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomLeftChild, point, nodeCapacity)) return true;\n  if (insert(node.topRightChild, point, nodeCapacity)) return true;\n  if (insert(node.bottomRightChild, point, nodeCapacity)) return true;\n\n  // We shouldn't ever get to this point, though\n  return false;\n}\n\n/**\n * A boundary contains a point if the point is within the (x, y)\n * coordinates of the boundary's top-left and bottom-right corner\n *\n * @param {Boundary} boundary\n * @param {Point} point\n * @returns\n */\nfunction contains(boundary, point) {\n  return (\n    point.x >= boundary.topLeft.x &&\n    point.x <= boundary.bottomRight.x &&\n    point.y >= boundary.topLeft.y &&\n    point.y <= boundary.bottomRight.y\n  );\n}\n\n/**\n * Splits a node into four child nodes and moves the\n * points in the node into their correct child nodes.\n *\n * @param {Quadtree} node\n * @param {number} nodeCapacity\n */\nfunction subdivide(node, nodeCapacity) {\n  // Create the four child nodes\n  const { topLeft, bottomRight } = node.boundary;\n  const midPoint = {\n    x: (topLeft.x + bottomRight.x) / 2,\n    y: (topLeft.y + bottomRight.y) / 2,\n  };\n\n  node.topLeftChild = createNode({ x: topLeft.x, y: topLeft.y }, { x: midPoint.x, y: midPoint.y });\n  node.bottomLeftChild = createNode(\n    { x: topLeft.x, y: midPoint.y },\n    { x: midPoint.x, y: bottomRight.y }\n  );\n  node.topRightChild = createNode(\n    { x: midPoint.x, y: topLeft.y },\n    { x: bottomRight.x, y: midPoint.y }\n  );\n  node.bottomRightChild = createNode(\n    { x: midPoint.x, y: midPoint.y },\n    { x: bottomRight.x, y: bottomRight.y }\n  );\n\n  // Move the points in the node to the child node that should contain the point.\n  // Again, we can try inserting each point into all the child nodes. The wrong ones\n  // (where the point's position is outside the child node's boundary) would simply\n  // return false, until we find the correct child node.\n  node.points.forEach((point) => {\n    if (insert(node.topLeftChild, point, nodeCapacity)) return;\n    if (insert(node.bottomLeftChild, point, nodeCapacity)) return;\n    if (insert(node.topRightChild, point, nodeCapacity)) return;\n    if (insert(node.bottomRightChild, point, nodeCapacity)) return;\n  });\n\n  // We no longer need to keep the points in node\n  node.points = [];\n}\n\n/**\n * Returns all the points within the given boundary\n *\n * @param {Quadtree} node\n * @param {Boundary} boundary\n * @returns\n */\nfunction search(node, boundary) {\n  // If this node does not intersect with the search boundary,\n  // we know that the node and all its child nodes do not\n  // contain any points that fall into the search boundary\n  if (!intersects(node.boundary, boundary)) {\n    return [];\n  }\n\n  // If this node has not yet been subdivided, return\n  // all the points within the search boundary\n  if (!node.topLeftChild) {\n    return node.points.filter((point) => contains(boundary, point));\n  }\n\n  // If the node has been subdivided, search all\n  // the child nodes and merge the results\n  return search(node.topLeftChild, boundary)\n    .concat(search(node.bottomLeftChild, boundary))\n    .concat(search(node.topRightChild, boundary))\n    .concat(search(node.bottomRightChild, boundary));\n}\n\n/**\n * Returns true if the given boundary intersects with this boundary\n *\n * @param {Boundary} b1\n * @param {Boundary} b2\n * @returns\n */\nfunction intersects(b1, b2) {\n  return (\n    // not too right\n    b1.topLeft.x <= b2.bottomRight.x &&\n    // not too left\n    b1.bottomRight.x >= b2.topLeft.x &&\n    // not too down\n    b1.topLeft.y <= b2.bottomRight.y &&\n    // not too up\n    b1.bottomRight.y >= b2.topLeft.y\n  );\n}\n\n/**\n * Returns the nearest point to the given point\n *\n * @param {Quadtree} node\n * @param {Point} location\n * @param {{point: Point, distance: number} | undefined} nearestPoint\n * @returns\n */\nfunction nearest(\n  node,\n  location,\n  nearestPoint = {\n    point: null,\n    distance: distance(node.boundary.topLeft, node.boundary.bottomRight),\n  }\n) {\n  // If this node is farther away than the nearest point, no need to check here or any of its child nodes\n  if (\n    location.x < node.boundary.topLeft.x - nearestPoint.distance || // location too left\n    location.x > node.boundary.bottomRight.x + nearestPoint.distance || // location too right\n    location.y < node.boundary.topLeft.y - nearestPoint.distance || // location too top\n    location.y > node.boundary.bottomRight.y + nearestPoint.distance // location too bottom\n  ) {\n    return nearestPoint;\n  }\n\n  // Not yet subdivided, return the nearest point in this node\n  if (!node.topLeftChild) {\n    node.points.forEach((point) => {\n      const d = distance(point, location);\n      if (d < nearestPoint.distance) {\n        nearestPoint.point = point;\n        nearestPoint.distance = d;\n      }\n    });\n    return nearestPoint;\n  }\n\n  // Since this node has already been subdivided, check all its child nodes.\n  // Check the child node where the location falls first, before checking\n  // the adjacent nodes, and then the opposite node.\n\n  const childNodes = [\n    node.topLeftChild,\n    node.topRightChild,\n    node.bottomLeftChild,\n    node.bottomRightChild,\n  ];\n\n  // True if location is at the top half of this node's boundary\n  const tb = location.y < (node.boundary.topLeft.y + node.boundary.bottomRight.y) / 2;\n  // True if location is at the left half of this node's boundary\n  const lr = location.x < (node.boundary.topLeft.x + node.boundary.bottomRight.x) / 2;\n\n  // containing node\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * (1 - lr)], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * (1 - tb) + 1 * lr], location, nearestPoint);\n  // adjacent node\n  nearestPoint = nearest(childNodes[2 * tb + 1 * (1 - lr)], location, nearestPoint);\n  // opposite node\n  nearestPoint = nearest(childNodes[2 * tb + 1 * lr], location, nearestPoint);\n\n  return nearestPoint;\n}\n\n/**\n * Returns the Euclidean distance between two points\n *\n * @param {Point} p1\n * @param {Point} p2\n * @returns\n */\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction createNode(topLeft, bottomRight) {\n  return { boundary: { topLeft, bottomRight }, points: [] };\n}\n\nmodule.exports = { insert, search, nearest, contains, distance };\n","const d3 = require('d3');\nconst { insert } = require('../quadtree');\n\nconst width = 750;\nconst height = 300;\n\nconst svg = d3.select('#target').append('svg').attr('width', width).attr('height', height);\n\nlet quadtree = {\n  boundary: {\n    topLeft: { x: 0, y: 0 },\n    bottomRight: { x: width, y: height },\n  },\n  points: [],\n  depth: 1,\n};\n\nconst color = d3.scaleLinear().domain([0, 8]).range(['#efe', '#060']);\n\nfunction nodes(quadtree) {\n  quadtree.depth = 0;\n\n  const nodes = [];\n  visit(quadtree, (node) => {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction points(quadtree) {\n  return nodes(quadtree).flatMap((node) => node.points);\n}\n\nfunction visit(node, cb) {\n  cb(node);\n\n  if (node.topLeftChild) {\n    node.topLeftChild.depth = node.depth + 1;\n    visit(node.topLeftChild, cb);\n\n    node.topRightChild.depth = node.depth + 1;\n    visit(node.topRightChild, cb);\n\n    node.bottomLeftChild.depth = node.depth + 1;\n    visit(node.bottomLeftChild, cb);\n\n    node.bottomRightChild.depth = node.depth + 1;\n    visit(node.bottomRightChild, cb);\n  }\n}\n\nlet pts;\nlet rect;\n\nfunction draw() {\n  rect = rect.data(nodes(quadtree));\n  rect.exit().remove();\n  rect\n    .enter()\n    .append('rect')\n    .attr('class', 'node')\n    .attr('x', function (d) {\n      return d.boundary.topLeft.x;\n    })\n    .attr('y', function (d) {\n      return d.boundary.topLeft.y;\n    })\n    .attr('width', function (d) {\n      return d.boundary.bottomRight.x - d.boundary.topLeft.x;\n    })\n    .attr('height', function (d) {\n      return d.boundary.bottomRight.y - d.boundary.topLeft.y;\n    });\n\n  pts = pts.data(points(quadtree));\n  pts.exit().remove();\n  pts\n    .enter()\n    .append('circle')\n    .attr('class', 'point')\n    .attr('cx', function (d) {\n      return d.x;\n    })\n    .attr('cy', function (d) {\n      return d.y;\n    })\n    .attr('r', 3);\n\n  svg.selectAll('.node').style('fill', function (d) {\n    return color(d.depth);\n    // return d.visited ? color(d.depth) : 'none';\n  });\n}\n\nrect = svg\n  .selectAll('.node')\n  .data(nodes(quadtree))\n  .enter()\n  .append('rect')\n  .attr('class', 'node')\n  .attr('x', function (d) {\n    return d.boundary.topLeft.x;\n  })\n  .attr('y', function (d) {\n    return d.boundary.topLeft.y;\n  })\n  .attr('width', function (d) {\n    return d.boundary.bottomRight.x - d.boundary.topLeft.x;\n  })\n  .attr('height', function (d) {\n    return d.boundary.bottomRight.y - d.boundary.topLeft.y;\n  });\n\npts = svg\n  .selectAll('.point')\n  .data(points(quadtree))\n  .enter()\n  .append('circle')\n  .attr('class', 'point')\n  .attr('cx', function (d) {\n    return d.x;\n  })\n  .attr('cy', function (d) {\n    return d.y;\n  })\n  .attr('r', 3);\n\nlet interval;\nconst n = 150;\n\nfor (let i = 0; i < n; i++) {\n  insert(quadtree, { x: Math.random() * width, y: Math.random() * height });\n}\n\ndraw();\n\ndocument.querySelector('button').addEventListener('click', () => {\n  if (interval) {\n    clearInterval(interval);\n  }\n\n  quadtree = {\n    boundary: {\n      topLeft: { x: 0, y: 0 },\n      bottomRight: { x: width, y: height },\n    },\n    points: [],\n    depth: 1,\n  };\n\n  let i = 0;\n  interval = setInterval(() => {\n    insert(quadtree, { x: Math.random() * width, y: Math.random() * height });\n    draw();\n\n    if (i++ === 150) {\n      clearInterval(interval);\n    }\n  }, 50);\n});\n"],"names":["$73dc4f22fc361a3a$var$insert","node","point","nodeCapacity","$73dc4f22fc361a3a$var$contains","boundary","points","length","topLeftChild","push","topLeft","bottomRight","midPoint","x","y","$73dc4f22fc361a3a$var$createNode","bottomLeftChild","topRightChild","bottomRightChild","forEach","$73dc4f22fc361a3a$var$subdivide","$73dc4f22fc361a3a$var$distance","p1","p2","Math","sqrt","pow","$73dc4f22fc361a3a$var$search","b1","b2","concat","filter","$73dc4f22fc361a3a$var$nearest","location","nearestPoint","distance","d","childNodes","tb","lr","insert","$adcc582d0ca8bd58$var$svg","$EQ8Ao","select","append","attr","$adcc582d0ca8bd58$var$quadtree","depth","$adcc582d0ca8bd58$var$color","scaleLinear","domain","range","$adcc582d0ca8bd58$var$nodes","quadtree","nodes","$adcc582d0ca8bd58$var$visit","$adcc582d0ca8bd58$var$points","flatMap","cb","$adcc582d0ca8bd58$var$pts","$adcc582d0ca8bd58$var$rect","$adcc582d0ca8bd58$var$interval","$adcc582d0ca8bd58$var$draw","data","exit","remove","enter","selectAll","style","i","$adcc582d0ca8bd58$require$insert","random","document","querySelector","addEventListener","clearInterval","i1","setInterval"],"version":3,"file":"3.1093cb92.js.map"}