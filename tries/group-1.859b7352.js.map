{"mappings":"kgBACMA,sBACAC,WAEN,MAAMC,EA0BG,gBAzBQC,GACb,MAAMC,EAAQD,EAAKE,MAAM,MAAMC,QAAQC,GAAMA,EAAEC,OAAS,IAElDC,EAAa,IAAIC,MAAM,IAI7B,OAHAN,EAAMO,SAASC,cAODH,EAAYG,GAG1B,MAAMC,EAAKC,EAAYC,QAAQH,EAAK,IAG/BH,EAAWI,KACdJ,EAAWI,GAAS,IAItBJ,EAAWI,GAAOG,KAAKJ,GAjBrBK,CAAOR,EAAYG,MAEdH,IAqBLS,EAAMC,EAAAC,OAAU,UAAUC,OAAO,OAAOC,KAAK,QAAS,QAAQA,KAAK,SAAU,iBAE1EC,EAASC,EAAMC,EAAO,GAAIC,EAAI,GAErC,GAAU,IAANA,EACF,MAAO,CAAED,KAAMD,EAAMG,SAAU,IAGjC,MAAMC,EAAO,MAAEH,EACfG,SAAgB,IAKhB,OAJAJ,EAAKb,SAAO,CAAEkB,EAAOC,KACnBF,EAAKD,SAASX,KAAKO,EAASM,EAAKf,EAAWgB,GAAIJ,EAAI,OAG/CE,EAGT,MAAMG,EAAc,CAAEC,EAAG,GAAIC,EAAG,KAE1BC,EACJ,+HACFf,EAAAC,OAAU,UACPe,SAAS,QAASD,GAClBE,GAAG,SAAUC,MACDnC,EAAWoC,MAAMD,EAAIE,OAAOC,OAAQjB,EAAUQ,EAAab,QAG/DhB,EAAWoC,MAAMJ,GAAQX,EAAUQ,EAAab","sources":["tries/demos/group-1.js"],"sourcesContent":["const d3 = require('d3');\nconst { alphabet } = require('../trie');\nconst { updateTree } = require('./graph');\n\nconst dictionary = (() => {\n  function parse(text) {\n    const words = text.split('\\n').filter((t) => t.length > 0);\n\n    const dictionary = new Array(26);\n    words.forEach((word) => {\n      insert(dictionary, word);\n    });\n    return dictionary;\n  }\n\n  // Adds a new word to the dictionary\n  function insert(dictionary, word) {\n    // Get the index of the first character in the alphabet.\n    // `index` will be a number from 0 to 25.\n    const index = alphabet.indexOf(word[0]);\n\n    // If a group has not been made for this letter, create it\n    if (!dictionary[index]) {\n      dictionary[index] = [];\n    }\n\n    // Push the word to its bucket\n    dictionary[index].push(word);\n  }\n\n  return { parse };\n})();\n\nconst svg = d3.select('#chart').append('svg').attr('width', '100%').attr('height', '100%');\n\nfunction toD3Tree(tree, name = '', d = 0) {\n  // At depth 2, the tree is a word\n  if (d === 2) {\n    return { name: tree, children: [] };\n  }\n\n  const node = { name };\n  node.children = [];\n  tree.forEach((child, i) => {\n    node.children.push(toD3Tree(child, alphabet[i], d + 1));\n  });\n\n  return node;\n}\n\nconst nodeSpacing = { x: 15, y: 100 };\n\nconst value =\n  'railway\\nfruit\\ndrain\\nanthem\\nelbow\\nappliance\\ndock\\ntramp\\nkick\\nsort\\nsquare\\nthrone\\ndaughter\\ntub\\ndirt\\nclam\\nwrist\\n';\nd3.select('#input')\n  .property('value', value)\n  .on('input', (evt) => {\n    updateTree(dictionary.parse(evt.target.value), toD3Tree, nodeSpacing, svg);\n  });\n\nupdateTree(dictionary.parse(value), toD3Tree, nodeSpacing, svg);\n"],"names":["alphabet","updateTree","$f449bc04140e4589$var$dictionary","text","words","split","filter","t","length","dictionary","Array","forEach","word","index","$f449bc04140e4589$require$alphabet","indexOf","push","insert","$f449bc04140e4589$var$svg","$h36xl","select","append","attr","$f449bc04140e4589$var$toD3Tree","tree","name","d","children","node","child","i","$f449bc04140e4589$var$nodeSpacing","x","y","$f449bc04140e4589$var$value","property","on","evt","parse","target","value"],"version":3,"file":"group-1.859b7352.js.map"}