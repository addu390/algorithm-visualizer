{"mappings":"ogBACMA,0BCDAC,EAAAC,WAAAD,EAAAE,OA2BNC,EAAiB,YAzBD,eAMLC,EAAUC,GACjB,MAAMC,EAAa,CAAEC,SAAU,IAAIC,MAAM,KAIzC,OAHAH,EAAMI,SAASC,MACNJ,EAAYI,MAEdJ,EAGT,MAAO,gBAbQK,GAEb,OAAOP,EADOO,EAAKC,MAAM,MAAMC,QAAQC,GAAMA,EAAEC,OAAS,gBAY1CX,IAdF,qBAiBPY,EAASC,EAAMC,EAAO,GAAIC,EAAI,GACrC,MAAMC,EAAO,MAAEF,EAAMX,SAAU,GAAIc,YAAaJ,EAAKI,YAAaC,QAASL,EAAKK,SAIhF,OAHAL,EAAKV,SAASE,SAAO,CAAEc,EAAOC,KAC5BJ,EAAKb,SAASkB,KAAKT,EAASO,EAAKG,EAAWF,GAAIL,EAAI,OAE/CC,UDtBHjB,EAAAG,aAAAH,EAAAwB,SAEN,MAAMC,EAAMC,EAAAC,OAAU,UAAUC,OAAO,OAAOC,KAAK,QAAS,QAAQA,KAAK,SAAU,QAE7EC,EAAc,CAAEC,EAAG,GAAIC,EAAG,IAIhCN,EAAAC,OAAU,UACPM,SAAS,QAFV,6FAGCC,GAAG,SAAUC,QACUC,MAAMD,EAAIE,OAAOC,OAAKC,EAAaT,EAAaL,UAGpDW,MAPpB,6FAO+BG,EAAaT,EAAaL","sources":["tries/demos/trie.js","tries/demos/trie-fns.js"],"sourcesContent":["const d3 = require('d3');\nconst { updateTree } = require('./graph');\nconst { dictionary, toD3Tree } = require('./trie-fns');\n\nconst svg = d3.select('#chart').append('svg').attr('width', '100%').attr('height', '100%');\n\nconst nodeSpacing = { x: 15, y: 50 };\n\nconst value =\n  'fruit\\ndrain\\ntrip\\nanthem\\nsolid\\nin\\ndock\\ntribute\\nkick\\nsort\\nso\\nsquare\\na\\nthrive\\n';\nd3.select('#input')\n  .property('value', value)\n  .on('input', (evt) => {\n    updateTree(dictionary.parse(evt.target.value), toD3Tree, nodeSpacing, svg);\n  });\n\nupdateTree(dictionary.parse(value), toD3Tree, nodeSpacing, svg);\n","const { alphabet, insert } = require('../trie');\n\nconst dictionary = (() => {\n  function parse(text) {\n    const words = text.split('\\n').filter((t) => t.length > 0);\n    return insertAll(words);\n  }\n\n  function insertAll(words) {\n    const dictionary = { children: new Array(26) };\n    words.forEach((word) => {\n      insert(dictionary, word);\n    });\n    return dictionary;\n  }\n\n  return { parse, insertAll };\n})();\n\nfunction toD3Tree(tree, name = '', d = 0) {\n  const node = { name, children: [], isEndOfWord: tree.isEndOfWord, checked: tree.checked };\n  tree.children.forEach((child, i) => {\n    node.children.push(toD3Tree(child, alphabet[i], d + 1));\n  });\n  return node;\n}\n\nmodule.exports = { dictionary, toD3Tree };\n"],"names":["updateTree","$hdh4m","alphabet","insert","$f2ebcad2386c758a$exports","insertAll","words","dictionary","children","Array","forEach","word","text","split","filter","t","length","$f2ebcad2386c758a$var$toD3Tree","tree","name","d","node","isEndOfWord","checked","child","i","push","$f2ebcad2386c758a$require$alphabet","toD3Tree","$d13103db2727738f$var$svg","$h36xl","select","append","attr","$d13103db2727738f$var$nodeSpacing","x","y","property","on","evt","parse","target","value","$d13103db2727738f$require$toD3Tree"],"version":3,"file":"trie.f714a4ca.js.map"}