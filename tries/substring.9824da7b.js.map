{"mappings":"0gBACMA,sBACAC,4BCFAD,WAAAE,EAAAC,OA2BNC,EAAiB,YAzBD,eAMLC,EAAUC,GACjB,MAAMC,EAAa,CAAEC,SAAU,IAAIC,MAAM,KAIzC,OAHAH,EAAMI,SAASC,MACNJ,EAAYI,MAEdJ,EAGT,MAAO,gBAbQK,GAEb,OAAOP,EADOO,EAAKC,MAAM,MAAMC,QAAQC,GAAMA,EAAEC,OAAS,gBAY1CX,IAdF,qBAiBPY,EAASC,EAAMC,EAAO,GAAIC,EAAI,GACrC,MAAMC,EAAO,MAAEF,EAAMX,SAAU,GAAIc,YAAaJ,EAAKI,YAAaC,QAASL,EAAKK,SAIhF,OAHAL,EAAKV,SAASE,SAAO,CAAEc,EAAOC,KAC5BJ,EAAKb,SAASkB,KAAKT,EAASO,EAAKG,EAAWF,GAAIL,EAAI,OAE/CC,UDrBHjB,EAAAwB,WAAAxB,EAAAG,WAEN,MAAMsB,EAAMC,EAAAC,OAAU,UAAUC,OAAO,OAAOC,KAAK,QAAS,QAAQA,KAAK,SAAU,QAC7EC,EAAc,CAAEC,EAAG,GAAIC,EAAG,IAEhC,IAAIC,EAAO,mBACPC,EAAS,OAEbR,EAAAC,OAAU,SACPQ,SAAS,QAASF,GAClBG,GAAG,SAAUC,IACZJ,EAAOI,EAAIC,OAAOC,MAClBC,EAAOP,EAAMC,MAGjB,MAAMO,EAAcf,EAAAC,OACV,WACPQ,SAAS,QAASD,GAClBE,GAAG,SAAUC,IACZH,EAASG,EAAIC,OAAOC,MACpBC,EAAOP,EAAMC,eAGRM,EAAOhC,EAAMkC,GACpB,MAAMC,EAAIC,EAAc3C,mBAMLO,GACnB,OAAOH,MAAMwC,KAAK,CAAEjC,OAAQJ,EAAKI,SAAQ,CAAGkC,EAAGzB,IAAMb,EAAKuC,UAAU1B,KAPlC2B,CAAYxC,IACxCyC,WASaC,EAAMC,GACzB,IAAIlC,EAAOiC,EACX,IAAK,IAAI7B,EAAI,EAAGA,EAAI8B,EAAOvC,OAAQS,IAAK,CACtC,MAAM+B,EAAKC,EAAYC,QAAQH,EAAO9B,IACtC,IAAKJ,EAAKb,SAASgD,GAEjB,OADAnC,EAAKE,QAAU,UACR,EAGTF,EAAOA,EAAKb,SAASgD,GACrBnC,EAAKE,QAAU,SAGjB,OAAO,EAtBSoC,CAAYZ,EAAMD,KACvBC,EAAIa,EAAY1B,EAAaL,GACxCgB,EAAYgB,QAAQ,WAAS,IAAQR,IAuBvCT,EAAOP,EAAMC","sources":["tries/demos/substring.js","tries/demos/trie-fns.js"],"sourcesContent":["const d3 = require('d3');\nconst { alphabet } = require('../trie');\nconst { updateTree } = require('./graph');\nconst { toD3Tree, dictionary } = require('./trie-fns');\n\nconst svg = d3.select('#chart').append('svg').attr('width', '100%').attr('height', '100%');\nconst nodeSpacing = { x: 12, y: 25 };\n\nlet text = 'entrepreneurship';\nlet search = 'rshi';\n\nd3.select('#text')\n  .property('value', text)\n  .on('input', (evt) => {\n    text = evt.target.value;\n    update(text, search);\n  });\n\nconst searchInput = d3\n  .select('#search')\n  .property('value', search)\n  .on('input', (evt) => {\n    search = evt.target.value;\n    update(text, search);\n  });\n\nfunction update(text, search) {\n  const trie = dictionary.insertAll(getSuffixes(text));\n  const matched = checkPrefix(trie, search);\n  updateTree(trie, toD3Tree, nodeSpacing, svg);\n  searchInput.classed('matched', () => matched);\n}\n\nfunction getSuffixes(text) {\n  return Array.from({ length: text.length }, (_, i) => text.substring(i));\n}\n\nfunction checkPrefix(root, prefix) {\n  let node = root;\n  for (let i = 0; i < prefix.length; i++) {\n    const index = alphabet.indexOf(prefix[i]);\n    if (!node.children[index]) {\n      node.checked = 'failed';\n      return false;\n    }\n\n    node = node.children[index];\n    node.checked = 'passed';\n  }\n\n  return true;\n}\n\nupdate(text, search);\n","const { alphabet, insert } = require('../trie');\n\nconst dictionary = (() => {\n  function parse(text) {\n    const words = text.split('\\n').filter((t) => t.length > 0);\n    return insertAll(words);\n  }\n\n  function insertAll(words) {\n    const dictionary = { children: new Array(26) };\n    words.forEach((word) => {\n      insert(dictionary, word);\n    });\n    return dictionary;\n  }\n\n  return { parse, insertAll };\n})();\n\nfunction toD3Tree(tree, name = '', d = 0) {\n  const node = { name, children: [], isEndOfWord: tree.isEndOfWord, checked: tree.checked };\n  tree.children.forEach((child, i) => {\n    node.children.push(toD3Tree(child, alphabet[i], d + 1));\n  });\n  return node;\n}\n\nmodule.exports = { dictionary, toD3Tree };\n"],"names":["alphabet","updateTree","$hdh4m","insert","$f2ebcad2386c758a$exports","insertAll","words","dictionary","children","Array","forEach","word","text","split","filter","t","length","$f2ebcad2386c758a$var$toD3Tree","tree","name","d","node","isEndOfWord","checked","child","i","push","$f2ebcad2386c758a$require$alphabet","toD3Tree","$f8870c88d94618cf$var$svg","$h36xl","select","append","attr","$f8870c88d94618cf$var$nodeSpacing","x","y","$f8870c88d94618cf$var$text","$f8870c88d94618cf$var$search","property","on","evt","target","value","$f8870c88d94618cf$var$update","$f8870c88d94618cf$var$searchInput","search","trie","$f8870c88d94618cf$require$dictionary","from","_","substring","$f8870c88d94618cf$var$getSuffixes","matched","root","prefix","index","$f8870c88d94618cf$require$alphabet","indexOf","$f8870c88d94618cf$var$checkPrefix","$f8870c88d94618cf$require$toD3Tree","classed"],"version":3,"file":"substring.9824da7b.js.map"}