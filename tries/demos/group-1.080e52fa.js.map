{"mappings":"qfAAMA,OCCN,MAAMC,EAAW,CACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,WAyCpB,OA9Bd,SACYC,GACb,MAAMC,EAAQD,EAAKE,MAAM,MAAMC,QAAQC,GAAMA,EAAEC,OAAS,IAElDC,EAAa,IAAIC,MAAM,IAI7B,OAHAN,EAAMO,SAASC,KAUd,SACaH,EAAYG,GAG1B,MAAMC,EAAQX,EAASY,QAAQF,EAAK,IAG/BH,EAAWI,KACdJ,EAAWI,GAAS,IAItBJ,EAAWI,GAAOE,KAAKH,GArBrBI,CAAOP,EAAYG,MAEdH,IDtBHQ,qBACAC,EAAAC,cAAAD,EAAAE,WAEN,MAAMC,EAAQC,EAAe,GACvBC,EAAc,CAAEC,EAAG,GAAIC,EAAG,KAE1BC,EACJ,iIACK,UACJC,SAAS,QAASD,GAClBE,GAAG,SAAUC,MACDR,EAAQS,EAAOD,EAAIE,OAAOC,QAAST,QAGvCF,EAAQS,EAAOJ,IAASH","sources":["tries/demos/group-1.js","tries/group-1.js"],"sourcesContent":["const { select } = require('d3-selection');\nconst { parse } = require('../group-1');\nconst { getToD3Tree, updateTree } = require('./d3');\n\nconst toD3Tree = getToD3Tree(1);\nconst nodeSpacing = { x: 15, y: 100 };\n\nconst value =\n  'railway\\nfruit\\ndrain\\nanthem\\nelbow\\nappliance\\ndock\\ntramp\\nkick\\nsort\\nsquare\\nthrone\\ndaughter\\ntub\\ndirt\\nclam\\nwrist\\n';\nselect('#input')\n  .property('value', value)\n  .on('input', (evt) => {\n    updateTree(toD3Tree(parse(evt.target.value)), nodeSpacing);\n  });\n\nupdateTree(toD3Tree(parse(value)), nodeSpacing);\n","// prettier-ignore\nconst alphabet = [\n  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\n  's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n];\n\n/**\n * @typedef {string[][]} Trie\n */\n\n/**\n * Creates a new dictionary from the text\n * @param {string} text\n * @returns {Trie}\n */\nfunction parse(text) {\n  const words = text.split('\\n').filter((t) => t.length > 0);\n\n  const dictionary = new Array(26);\n  words.forEach((word) => {\n    insert(dictionary, word);\n  });\n  return dictionary;\n}\n\n/**\n * Adds a new word to the dictionary\n * @param {Trie} dictionary\n * @param {string} word\n */\nfunction insert(dictionary, word) {\n  // Get the index of the first character in the alphabet.\n  // `index` will be a number from 0 to 25.\n  const index = alphabet.indexOf(word[0]);\n\n  // If a group has not been made for this letter, create it\n  if (!dictionary[index]) {\n    dictionary[index] = [];\n  }\n\n  // Push the word to its bucket\n  dictionary[index].push(word);\n}\n\nmodule.exports = { parse };\n"],"names":["select","$7c1d0fe6b85a16dc$var$alphabet","text","words","split","filter","t","length","dictionary","Array","forEach","word","index","indexOf","push","$7c1d0fe6b85a16dc$var$insert","parse","$dURhu","getToD3Tree","updateTree","$f449bc04140e4589$var$toD3Tree","$f449bc04140e4589$require$getToD3Tree","$f449bc04140e4589$var$nodeSpacing","x","y","$f449bc04140e4589$var$value","property","on","evt","$f449bc04140e4589$require$parse","target","value"],"version":3,"file":"group-1.080e52fa.js.map"}