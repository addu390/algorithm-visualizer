{"mappings":"qfAAMA,OCCN,MAAMC,EAAW,CACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KA8BlC,SACMC,EAAOC,EAAYC,GAG1B,IAAIC,EAAUF,EAGd,MAAMG,EAAmBL,EAASM,QAAQH,EAAK,IAS/C,GARKC,EAAQG,SAASF,KAEpBD,EAAQG,SAASF,GAAoB,CAAEG,aAAa,EAAOD,SAAU,IAAIE,MAAM,MAGjFL,EAAUA,EAAQG,SAASF,GAGP,IAAhBF,EAAKO,OAEP,YADAN,EAAQI,aAAc,GAKxB,MAAMG,EAAoBX,EAASM,QAAQH,EAAK,IAC3CC,EAAQG,SAASI,KACpBP,EAAQG,SAASI,GAAqB,CAAEH,aAAa,EAAOD,SAAU,IAAIE,MAAM,MAElFL,EAAUA,EAAQG,SAASI,GAGP,IAAhBR,EAAKO,OAMTN,EAAQG,SAASK,KAAKT,GALpBC,EAAQI,aAAc,QAQT,QAAEP,QAxDhB,SACYY,GACb,MAAMC,EAAQD,EAAKE,MAAM,MAAMC,QAAQC,GAAMA,EAAEP,OAAS,IAElDR,EAAa,CAAEK,SAAU,IAAIE,MAAM,KAIzC,OAHAK,EAAMI,SAASf,IACbF,EAAOC,EAAYC,MAEdD,IDvBHiB,qBACAC,EAAAC,cAAAD,EAAAE,WAEN,MAAMC,EAAQC,EAAe,GACvBC,EAAc,CAAEC,EAAG,GAAIC,EAAG,KAE1BC,EACJ,oHACK,UACJC,SAAS,QAASD,GAClBE,GAAG,SAAUC,MACDR,EAAQS,EAAOD,EAAIE,OAAOC,QAAST,QAGvCF,EAAQS,EAAOJ,IAASH","sources":["tries/demos/group-2.js","tries/group-2.js"],"sourcesContent":["const { select } = require('d3-selection');\nconst { parse } = require('../group-2');\nconst { getToD3Tree, updateTree } = require('./d3');\n\nconst toD3Tree = getToD3Tree(2);\nconst nodeSpacing = { x: 15, y: 100 };\n\nconst value =\n  'fruit\\ndrain\\ntrip\\nanthem\\nelbow\\nsolid\\nin\\nappliance\\ndock\\ntribute\\nsort\\nso\\nsquare\\neloquent\\na\\nthrive\\n';\nselect('#input')\n  .property('value', value)\n  .on('input', (evt) => {\n    updateTree(toD3Tree(parse(evt.target.value)), nodeSpacing);\n  });\n\nupdateTree(toD3Tree(parse(value)), nodeSpacing);\n","// prettier-ignore\nconst alphabet = [\n  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\n  's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n];\n\n/**\n * A Node in the dictionary\n * @typedef {{children: (Trie[]), isEndOfWord?: boolean}} Trie\n */\n\n/**\n * Creates a new dictionary from the text\n * @param {string} text\n * @returns {Trie}\n */\nfunction parse(text) {\n  const words = text.split('\\n').filter((t) => t.length > 0);\n\n  const dictionary = { children: new Array(26) };\n  words.forEach((word) => {\n    insert(dictionary, word);\n  });\n  return dictionary;\n}\n\n/**\n * Adds the word into the dictionary. At the second level\n * of the tree, it adds the word as a child node.\n *\n * @param {Trie} dictionary\n * @param {string} word\n * @returns\n */\nfunction insert(dictionary, word) {\n  // As we go deeper into the dictionary, we need to keep track\n  // of the current level we're on, starting from the root dictionary\n  let current = dictionary;\n\n  // Create a child dictionary for words starting with the first character\n  const firstLetterIndex = alphabet.indexOf(word[0]);\n  if (!current.children[firstLetterIndex]) {\n    // We've added an `isEndOfWord` flag to denote whether this child dictionary is itself a word\n    current.children[firstLetterIndex] = { isEndOfWord: false, children: new Array(26) };\n  }\n  // Update current to point to the child dictionary\n  current = current.children[firstLetterIndex];\n\n  // If the word has only one character, then the child dictionary is a word\n  if (word.length === 1) {\n    current.isEndOfWord = true;\n    return;\n  }\n\n  // Create a child dictionary for words starting with the second character\n  const secondLetterIndex = alphabet.indexOf(word[1]);\n  if (!current.children[secondLetterIndex]) {\n    current.children[secondLetterIndex] = { isEndOfWord: false, children: new Array(26) };\n  }\n  current = current.children[secondLetterIndex];\n\n  // If the word has two characters, then the current child dictionary is a word\n  if (word.length === 2) {\n    current.isEndOfWord = true;\n    return;\n  }\n\n  // The word has more than two characters, push it to the current child dictionary\n  current.children.push(word);\n}\n\nmodule.exports = { insert, parse };\n"],"names":["select","$74b7fe1272461f67$var$alphabet","$74b7fe1272461f67$var$insert","dictionary","word","current","firstLetterIndex","indexOf","children","isEndOfWord","Array","length","secondLetterIndex","push","text","words","split","filter","t","forEach","parse","$dURhu","getToD3Tree","updateTree","$372772ccd622c438$var$toD3Tree","$372772ccd622c438$require$getToD3Tree","$372772ccd622c438$var$nodeSpacing","x","y","$372772ccd622c438$var$value","property","on","evt","$372772ccd622c438$require$parse","target","value"],"version":3,"file":"group-2.7ec0b3ac.js.map"}