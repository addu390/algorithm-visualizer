{"mappings":"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","sources":["tries/demos/d3.js","node_modules/d3-hierarchy/src/hierarchy/index.js","node_modules/d3-hierarchy/src/hierarchy/count.js","node_modules/d3-hierarchy/src/hierarchy/each.js","node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","node_modules/d3-hierarchy/src/hierarchy/find.js","node_modules/d3-hierarchy/src/hierarchy/sum.js","node_modules/d3-hierarchy/src/hierarchy/sort.js","node_modules/d3-hierarchy/src/hierarchy/path.js","node_modules/d3-hierarchy/src/hierarchy/ancestors.js","node_modules/d3-hierarchy/src/hierarchy/descendants.js","node_modules/d3-hierarchy/src/hierarchy/leaves.js","node_modules/d3-hierarchy/src/hierarchy/links.js","node_modules/d3-hierarchy/src/hierarchy/iterator.js","node_modules/d3-hierarchy/src/tree.js","node_modules/d3-shape/src/link/index.js","node_modules/d3-path/src/path.js","node_modules/d3-shape/src/array.js","node_modules/d3-shape/src/constant.js","node_modules/d3-shape/src/point.js","node_modules/d3-shape/src/pointRadial.js","tries/trie.js"],"sourcesContent":["import { hierarchy, tree } from 'd3-hierarchy';\nimport { select } from 'd3-selection';\nimport { linkHorizontal } from 'd3-shape';\nconst { alphabet } = require('../trie');\n\n/**\n * @typedef {{name: string, children: D3Tree[], isEndOfWord?: boolean, checked?: boolean}} D3Tree\n */\n\nconst svg = select('#chart').append('svg').attr('width', '100%').attr('height', '100%');\n\n/**\n * Returns a function that converts a tree to a D3-friendly version\n * @param {number} maxDepth Maximum depth where to put the full words (should be 0 for a regular prefix)\n * @returns {(tree: any, name?: string, depth?: number) => D3Tree}\n */\nfunction getToD3Tree(maxDepth = 0) {\n  return function toD3Tree(tree, name = '', depth = 0) {\n    if (maxDepth && depth === maxDepth + 1) {\n      return { name: tree, children: [] };\n    }\n\n    const node = { name, children: [], isEndOfWord: tree.isEndOfWord, checked: tree.checked };\n    (maxDepth === 1 ? tree : tree.children).forEach((child, i) => {\n      node.children.push(toD3Tree(child, alphabet[i], depth + 1));\n    });\n    return node;\n  };\n}\n\n/**\n * Renders the tree\n * @param {D3Tree} _tree\n * @param {{x:number, y:number}} nodeSpacing\n */\nfunction updateTree(_tree, nodeSpacing) {\n  const root = tree().nodeSize([nodeSpacing.x, nodeSpacing.y])(hierarchy(_tree));\n\n  // The tree is 90 deg. rotated, so the x, y values are reversed from here on\n\n  let minX = Infinity;\n  let maxX = -minX;\n  root.each((d) => {\n    if (d.x < minX) minX = d.x;\n    if (d.x > maxX) maxX = d.x;\n  });\n\n  const height = maxX - minX + nodeSpacing.x / 2;\n\n  let graph = svg.selectAll('g.graph').data([true]);\n  const newGraph = graph\n    .enter()\n    .append('g')\n    .classed('graph', () => true)\n    .merge(graph)\n    .attr('transform', () => `translate(${20},${(3 / 5) * height})`);\n  graph.exit().remove();\n\n  const links = newGraph.selectAll('path').data(root.links());\n  links\n    .enter()\n    .append('path')\n    .attr('fill', 'none')\n    .attr('stroke', '#aaa')\n    .attr('stroke-opacity', 0.4)\n    .attr('stroke-width', 1.5)\n    .merge(links)\n    .attr(\n      'd',\n      linkHorizontal()\n        .x((d) => d.y)\n        .y((d) => d.x)\n    );\n  links.exit().remove();\n\n  const nodes = newGraph\n    .selectAll('g.node')\n    .data(\n      root.descendants(),\n      (d) => `${d.data.name}-${d.data.isEndOfWord}-${d.depth}-${d.data.checked}`\n    );\n\n  const newNodes = nodes\n    .enter()\n    .append('g')\n    .classed('node', () => true);\n  newNodes.append('circle').attr('fill', '#aaa').attr('r', 3);\n  newNodes\n    .append('text')\n    .text((d) => d.data.name)\n    .attr('dy', '0.32em')\n    .attr('x', (d) => (d.children ? -6 : 6))\n    .attr('text-anchor', (d) => (d.children ? 'end' : 'start'));\n  newNodes\n    .merge(nodes)\n    .classed('word', (d) => !!d.data.isEndOfWord)\n    .classed('checked-passed', (d) => d.data.checked === 'passed')\n    .classed('checked-failed', (d) => d.data.checked === 'failed')\n    .attr('transform', (d) => `translate(${d.y},${d.x})`);\n  nodes.exit().remove();\n}\n\nmodule.exports = { updateTree, getToD3Tree };\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export default function*() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","import {path} from \"d3-path\";\nimport {slice} from \"../array.js\";\nimport constant from \"../constant.js\";\nimport {x as pointX, y as pointY} from \"../point.js\";\nimport pointRadial from \"../pointRadial.js\";\n\nfunction linkSource(d) {\n  return d.source;\n}\n\nfunction linkTarget(d) {\n  return d.target;\n}\n\nfunction link(curve) {\n  var source = linkSource,\n      target = linkTarget,\n      x = pointX,\n      y = pointY,\n      context = null;\n\n  function link() {\n    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\n    if (!context) context = buffer = path();\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  link.source = function(_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n\n  link.target = function(_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n\n  link.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n\n  link.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n\n  link.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), link) : context;\n  };\n\n  return link;\n}\n\nfunction curveHorizontal(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n}\n\nfunction curveVertical(context, x0, y0, x1, y1) {\n  context.moveTo(x0, y0);\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n}\n\nfunction curveRadial(context, x0, y0, x1, y1) {\n  var p0 = pointRadial(x0, y0),\n      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\n      p2 = pointRadial(x1, y0),\n      p3 = pointRadial(x1, y1);\n  context.moveTo(p0[0], p0[1]);\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\nexport function linkHorizontal() {\n  return link(curveHorizontal);\n}\n\nexport function linkVertical() {\n  return link(curveVertical);\n}\n\nexport function linkRadial() {\n  var l = link(curveRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) {}\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export var slice = Array.prototype.slice;\n\nexport default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","export default function(x, y) {\n  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n}\n","// prettier-ignore\nconst alphabet = [\n  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\n  's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n];\n\n/**\n * @typedef {{children: Trie[], isEndOfWord?: boolean, checked?: string }} Trie\n */\n\n/**\n * Creates a new dictionary from the text\n * @param {string} text\n * @returns {Trie}\n */\nfunction parse(text) {\n  const words = text.split('\\n').filter((t) => t.length > 0);\n  return insertAll(words);\n}\n\n/**\n * Creates a new dictionary from a list of words\n * @param {string[]} words\n * @returns {Trie}\n */\nfunction insertAll(words) {\n  const dictionary = { children: new Array(26) };\n  words.forEach((word) => {\n    insert(dictionary, word);\n  });\n  return dictionary;\n}\n\n/**\n * Adds a word to the dictionary\n * @param {Trie} dictionary\n * @param {string} word\n */\nfunction insert(dictionary, word) {\n  let current = dictionary;\n\n  // For each character in the word...\n  for (let i = 0; i < word.length; i++) {\n    // Create a new child dictionary for this character\n    const index = alphabet.indexOf(word[i]);\n    if (!current.children[index]) {\n      current.children[index] = { isEndOfWord: false, children: new Array(26) };\n    }\n\n    // Update the current child dictionary\n    current = current.children[index];\n  }\n\n  // The deepest child dictionary represents the last character in the word\n  current.isEndOfWord = true;\n}\n\n/**\n * Returns true if the tree contains the prefix\n * @param {Trie} tree\n * @param {string} prefix\n * @returns\n */\nfunction hasPrefix(tree, prefix) {\n  let node = tree;\n\n  // For each character in the prefix...\n  for (let i = 0; i < prefix.length; i++) {\n    const index = alphabet.indexOf(prefix[i]);\n\n    // If there is no child tree, there\n    // are no words starting with the prefix\n    if (!node.children[index]) {\n      node.checked = 'failed';\n      return false;\n    }\n\n    node = node.children[index];\n    node.checked = 'passed';\n  }\n\n  // If child trees exist till the end of the\n  // prefix, then the tree contains the prefix!\n  return true;\n}\n\n/**\n * Returns all the words in the dictionary that start with the prefix\n * @param {Trie} dictionary\n * @param {string} prefix\n * @returns\n */\nfunction startsWith(dictionary, prefix) {\n  let current = dictionary;\n\n  // For each character in the prefix...\n  for (let i = 0; i < prefix.length; i++) {\n    const index = alphabet.indexOf(prefix[i]);\n\n    // If there is no child dictionary, there\n    // are no words starting with the prefix\n    if (!current.children[index]) return [];\n\n    current = current.children[index];\n  }\n\n  // At the end of the prefix, we collect the words\n  // in the current child dictionary and its children\n  const matches = [];\n  collectWords(current, prefix, matches);\n  return matches;\n}\n\n/**\n * Collects all the words in the dictionary, prefixing them with `currentWord`\n * @param {Trie} dictionary\n * @param {string} currentWord\n * @param {string[]} words\n */\nfunction collectWords(dictionary, currentWord, words) {\n  // If the current dictionary is the end of the word, collect the word\n  if (dictionary.isEndOfWord) words.push(currentWord);\n\n  // Collect the words from each child dictionary\n  dictionary.children.forEach((childNode, i) => {\n    collectWords(childNode, currentWord + alphabet[i], words);\n  });\n}\n\nmodule.exports = { insert, startsWith, hasPrefix, alphabet, parse, insertAll };\n"],"names":["alphabet","$a219d5d1720c0d4a$var$svg","$cNEHL","select","append","attr","module","exports","_tree","nodeSpacing","root","$25OY1","default","nodeSize","x","y","$5HQEU","minX","Infinity","maxX","each","d","height","graph","selectAll","data","newGraph","enter","classed","merge","exit","remove","links","$eagMf","linkHorizontal","nodes","descendants","name","isEndOfWord","depth","checked","newNodes","text","children","maxDepth","toD3Tree","tree","node","forEach","child","i","push","$a219d5d1720c0d4a$require$alphabet","Map","undefined","$4279d0d33a55e9a8$var$mapChildren","$4279d0d33a55e9a8$var$objectChildren","childs","n","$4279d0d33a55e9a8$export$85c928794f8d04d4","pop","Array","from","length","parent","eachBefore","$4279d0d33a55e9a8$export$5af32d52ab5dfd57","isArray","$4279d0d33a55e9a8$var$copyData","value","this","prototype","$4279d0d33a55e9a8$export$2e2bcd8739ae039","constructor","count","$5pMom","$jNHWs","eachAfter","$cB4mA","$kl4FM","find","$5zX19","sum","$eKdfv","sort","$7ckUC","path","$gLMZC","ancestors","$hQKak","$cuTaZ","leaves","$gYqbe","$ejCZH","copy","Symbol","iterator","$e0OHY","$3f14d32b583a4c39$var$count","callback","that","index","call","next","compare","end","start","ancestor","a","b","aNodes","bNodes","c","$c3570a16ae3b9fdd$var$leastCommonAncestor","k","splice","source","target","current","reverse","$1863956a8ce2bb74$var$defaultSeparation","$1863956a8ce2bb74$var$nextLeft","v","t","$1863956a8ce2bb74$var$nextRight","$1863956a8ce2bb74$var$moveSubtree","wm","wp","shift","change","s","z","m","$1863956a8ce2bb74$var$nextAncestor","vim","$1863956a8ce2bb74$var$TreeNode","_","A","separation","dx","dy","$1863956a8ce2bb74$var$treeRoot","firstWalk","secondWalk","sizeNode","left","right","bottom","tx","kx","ky","siblings","w","$1863956a8ce2bb74$var$executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","arguments","size","Object","create","Node","$a4ff036ff57bf417$var$linkSource","$a4ff036ff57bf417$var$linkTarget","$a4ff036ff57bf417$var$link","curve","$aKyZ3","context","link","buffer","argv","$aGwT2","slice","apply","$1ZZ0s","$jAn1f","$a4ff036ff57bf417$var$curveHorizontal","x0","y0","x1","y1","moveTo","bezierCurveTo","$a4ff036ff57bf417$export$e7c381889b2cd14d","$174acf8a4697479e$var$pi","Math","PI","$174acf8a4697479e$var$tau","$174acf8a4697479e$var$epsilon","$174acf8a4697479e$var$tauEpsilon","$174acf8a4697479e$var$Path","_x0","_y0","_x1","_y1","$174acf8a4697479e$var$path","closePath","lineTo","quadraticCurveTo","x2","y2","arcTo","r","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","cos","sin","cw","da","rect","h","toString","$174acf8a4697479e$export$2e2bcd8739ae039","$7c77563a4ac58b5b$export$58adb3bec8346d0f","$7d39564cb1e5d0e3$export$d141bba7fdc215a3","p","$7d39564cb1e5d0e3$export$4a5767248b18ef41","$c880e43055d1c5ed$var$alphabet","$c880e43055d1c5ed$var$insertAll","words","dictionary","word","$c880e43055d1c5ed$var$insert","indexOf","$c880e43055d1c5ed$var$collectWords","currentWord","childNode","prefix","matches","split","filter"],"version":3,"file":"group-1.5352808a.js.map"}